server:
  port: 5000  # AWS Beanstalk 기본 포트

spring:
  application:
    name: stockradar

  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true

  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    check-template-location: true
    cache: false

  sql:
    init:
      mode: always
      continue-on-error: true

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
        highlight_sql: true
        use_sql_comments: true
        dialect: org.hibernate.dialect.MySQL8InnoDBDialect

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}

  # Kafka 설정
  kafka:
    bootstrap-servers: ${KAFKA_BROKER}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: notification-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls.enable: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000

management:
  health:
    elasticsearch:
      enabled: false # 불필요한 health check fail 로그 차단

##### 로그 설정
logging:
  level:
    root: INFO
    org.springframework: INFO
    org.springframework.web: DEBUG
    org.example.stockradar: DEBUG
    org.thymeleaf: INFO
    org.springframework.boot.web.servlet: ERROR
    org.hibernate.SQL: DEBUG

  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %highlight(%-5level) %cyan(%logger{36}) - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    dateformat: "yyyy-MM-dd HH:mm:ss,Asia/Seoul"

  file:
    name: logs/app.log
    path: logs

  logback:
    rollingpolicy:
      file-name-pattern: "StockRadar.%d{yyyy-MM-dd}.%i.log"
      max-history: 60

cloud:
  aws:
    credentials:
      access-key: ${AWS_ACCESS_KEY_ID}
      secret-key: ${AWS_SECRET_ACCESS_KEY}
    s3:
      bucket: ${AWS_S3_BUCKET}
    region:
      static: ap-northeast-2
    stack:
      auto: false
    s3path: "https://${AWS_S3_BUCKET}.s3.ap-northeast-2.amazonaws.com"
    cloudfrontpath: "https://${AWS_CLOUDFRONT_DISTRIBUTION}.cloudfront.net"

security:
  oauth2:
    client:
      registration:
        naver:
          client-id: ${NAVER_CLIENT_ID}
          client-secret: ${NAVER_CLIENT_SECRET}
          client-name: Naver
          scope:
            - name
            - email
          redirect-uri: "https://${DOMAIN}/login/oauth2/code/naver"
          authorization-grant-type: authorization_code
          client-authentication-method: client_secret_basic

        discord:
          client-id: ${DISCORD_CLIENT_ID}
          client-secret: ${DISCORD_CLIENT_SECRET}
          client-name: Discord
          scope:
            - identify
            - email
          redirect-uri: "https://${DOMAIN}/login/oauth2/code/discord"
          authorization-grant-type: authorization_code
          client-authentication-method: client_secret_basic

        google:
          client-id: ${GOOGLE_CLIENT_ID}
          client-secret: ${GOOGLE_CLIENT_SECRET}
          scope:
            - email
            - profile
          redirect-uri: "https://${DOMAIN}/login/oauth2/code/google"
          client-name: Google
      provider:
        naver:
          authorization-uri: https://nid.naver.com/oauth2.0/authorize
          token-uri: https://nid.naver.com/oauth2.0/token
          user-info-uri: https://openapi.naver.com/v1/nid/me
          user-name-attribute: response

        discord:
          authorization-uri: https://discord.com/oauth2/authorize
          token-uri: https://discord.com/api/oauth2/token
          user-info-uri: https://discord.com/api/users/@me
          user-name-attribute: id

jwt:
  secret: ${JWT_SECRET}

discord:
  bot:
    token: ${DISCORD_BOT_TOKEN}

DOMAIN: ${DOMAIN}
